import React from 'react';
import { FlatList, TouchableOpacity, Image, View,SectionList,StyleSheet } from 'react-native';
import {
	Container,
	Content,
	Text,
	Button,
} from 'native-base';
import { graphql, compose } from "react-apollo";

// custom components
import Baby from '../../components/Baby';
import BBBHeader from '../../components/BBBHeader';
import BBBIcon from '../../components/BBBIcon';
//import getNestedCategoryList from './NestedCategoryApi';
import { ProgressDialog, Dialog } from 'react-native-simple-dialogs';
import ExpandableList from 'react-native-expandable-section-flatlist';

import {
  GET_CACHED_TRANSLATIONS
, GET_LOGIN_STATUS
, GET_NESTED_CATEGORY_LIST
} from '../../graphql/Queries'
import { w, i18n, i18nTransformCategories } from '../../utils/helpers.js'

// screen style
import styles from './styles';
import { Layout, Colors } from '../../constants/';

export default CategoryScreen = compose(
  graphql(GET_LOGIN_STATUS, {name: "loginStatus"})
, graphql(GET_NESTED_CATEGORY_LIST, {name: "categoryList"})
, graphql(GET_CACHED_TRANSLATIONS, {
    name: "i18n"
  , skip: ({ loginStatus }) => !loginStatus
  , options: ({loginStatus}) => ({
      variables: {
        locusId: 1
      , countryCode: loginStatus.countryCode
      }
    , fetchPolicy: 'cache-only'
    })
  })
)(
class extends React.Component {

  constructor(props) {
    super(props)
  }
  //https://github.com/cuiyueshuai/react-native-expandable-section-flatlist
  //https://www.npmjs.com/package/react-native-expandable-section-flatlisthttps://www.npmjs.com/package/react-native-expandable-section-flatlist
  //Warning: Failed child context type: Invalid child context `virtualizedCell.cellKey` of type `number` supplied to `CellRenderer`, expected `string`.
  //This error is generated by the npm package above. I have fixed it on the github repo, but the npm has not been updated.
  //To fix temporarily, change line 55 of index.js in this package to: _keyExtractor = (item, index) => index.toString();

        //key = {rowItem.key}
  _renderRow = (rowItem, rowId, sectionId) => (
    <View style={styles.mainlist} >
      <TouchableOpacity
        style={{
          flex: 1,
          flexDirection: 'row',
          justifyContent: 'flex-end',
        }}
        onPress = {() => {
          this.props.navigation.navigate('searchResultScreen', {
            loginStatus: this.props.navigation.state.params.loginStatus
          , filter: { categories: [rowItem.id] }
          })
        }}
      >
        <View style={styles.bodys}>
          <Text style={styles.bodyTitle}>{rowItem.childName}</Text>
        </View>
        <View style={styles.body}>
          <BBBIcon
            name="RightArrow"
            style={styles.nextarrow}
            size={Layout.moderateScale(14)}
          />
        </View>
      </TouchableOpacity>
    </View>
  )

  render() {

    var leftComponent = (
      <Button transparent onPress={() => this.props.navigation.navigate('homeScreen')}>
        <BBBIcon
          name="BackArrow"
          size={Layout.moderateScale(18)}
          style={styles.backarrow}
        />
      </Button>
    )

    let notReady = !w(this.props, ['i18n', 'getCachedLocus']) || !w(this.props, ['categoryList', 'allCategoriesNested'])
    let { loginStatus, i18n: {getCachedLocus: translations}, categoryList: { allCategoriesNested }} = this.props
    const parentName = "CategoryScreen"

    return (
      <Container style={styles.container}>
        <BBBHeader
          title={i18n(translations, parentName, "Categories", loginStatus.iso639_2, "Categories")}
          leftComponent={leftComponent}
        />
        <Content>
        { notReady
        ? null
        : [ allCategoriesNested.length == 0 ? (
          <Text style={styles.noDataText}>
            No Categories Found
          </Text>
          ):(
          <ExpandableList
            key={"avoidWarning"}
            dataSource={i18nTransformCategories(allCategoriesNested, loginStatus, translations)}
            headerKey="name"
            memberKey="data"
            renderRow={this._renderRow}
            renderSectionHeaderX={(section, sectionId) => (
              <View style={styles.mainlist}>
                <Text style={styles.SectionHeaderStyle}>{section}</Text>
              </View>
            )}
          />
          )
        ]}
        </Content>
        <ProgressDialog
          visible={notReady}
          message="Please Wait..."
          activityIndicatorSize="large"
          activityIndicatorColor="blue"
        />
      </Container>
    )
  }
}
)
